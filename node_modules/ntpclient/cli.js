"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander = require("commander");
const fs = require("fs");
const path = require("path");
const _1 = require("./");
const defaultPackageJsonPath = path.join(__dirname, 'package.json');
const packageJsonPath = fs.existsSync(defaultPackageJsonPath)
    ? defaultPackageJsonPath
    : path.join(__dirname, '../package.json');
const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');
const { bin, description, version } = JSON.parse(packageJson);
commander
    .name(Object.keys(bin)[0])
    .version(version)
    .description(description)
    .option('-s, --server <host>', 'Specify a custom NTP server')
    .option('-p, --port <number>', 'Specify a custom NTP port')
    .option('-t, --timeout <number>', 'Specify the timeout in milliseconds')
    .parse(process.argv);
const commanderOptions = commander.opts();
void (() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const date = yield new _1.NTPClient(Object.assign(Object.assign(Object.assign({}, (commanderOptions.server && { server: commanderOptions.server })), (commanderOptions.port && { port: commanderOptions.port })), (commanderOptions.timeout && { replyTimeout: commanderOptions.timeout }))).getNetworkTime();
        console.info(date.toString());
        process.exit();
    }
    catch (error) {
        console.error(error);
        process.exit(1);
    }
}))();
//# sourceMappingURL=cli.js.map